// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OptimusBillingProject.Models;

namespace OptimusBillingProject.Migrations
{
    [DbContext(typeof(BillingDbContext))]
    [Migration("20191110110652_monthlyProjectData seeded")]
    partial class monthlyProjectDataseeded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OptimusBillingProject.Entity.MonthlyProjectData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<float>("MonthlyBilledAmount")
                        .HasColumnType("real");

                    b.Property<float>("MonthlyBilledHours")
                        .HasColumnType("real");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("MonthlyProjectData");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsLocked = true,
                            LastUpdatedOn = new DateTime(2019, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MonthlyBilledAmount = 50f,
                            MonthlyBilledHours = 50f,
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsLocked = true,
                            LastUpdatedOn = new DateTime(2019, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MonthlyBilledAmount = 100f,
                            MonthlyBilledHours = 100f,
                            ProjectId = 2
                        },
                        new
                        {
                            Id = 3,
                            IsLocked = true,
                            LastUpdatedOn = new DateTime(2019, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MonthlyBilledAmount = 150f,
                            MonthlyBilledHours = 150f,
                            ProjectId = 3
                        },
                        new
                        {
                            Id = 4,
                            IsLocked = true,
                            LastUpdatedOn = new DateTime(2018, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MonthlyBilledAmount = 100f,
                            MonthlyBilledHours = 100f,
                            ProjectId = 2
                        },
                        new
                        {
                            Id = 5,
                            IsLocked = true,
                            LastUpdatedOn = new DateTime(2018, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MonthlyBilledAmount = 200f,
                            MonthlyBilledHours = 200f,
                            ProjectId = 4
                        });
                });

            modelBuilder.Entity("OptimusBillingProject.Entity.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastBilledDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("TotalBilledAmount")
                        .HasColumnType("real");

                    b.Property<float>("TotalBilledHours")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LastBilledDate = new DateTime(2019, 11, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            TotalBilledAmount = 200f,
                            TotalBilledHours = 200f
                        },
                        new
                        {
                            Id = 2,
                            LastBilledDate = new DateTime(2019, 11, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            TotalBilledAmount = 250f,
                            TotalBilledHours = 250f
                        },
                        new
                        {
                            Id = 3,
                            LastBilledDate = new DateTime(2019, 11, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            TotalBilledAmount = 300f,
                            TotalBilledHours = 300f
                        },
                        new
                        {
                            Id = 4,
                            LastBilledDate = new DateTime(2019, 11, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            TotalBilledAmount = 400f,
                            TotalBilledHours = 400f
                        });
                });

            modelBuilder.Entity("OptimusBillingProject.Entity.MonthlyProjectData", b =>
                {
                    b.HasOne("OptimusBillingProject.Entity.Project", "Project")
                        .WithMany("MonthlyProjectData")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
